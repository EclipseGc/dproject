<?php
/**
 * Contains implementation install, uninstall and schema hooks for dproject.
 *
 * @version $Id$
 **/

/**
 * Implementation of hook_install
 **/
function dproject_install() {
  // Make sure that we get the correct path for our projects if pathauto
  // is or will be installed.
  variable_set('pathauto_node_dproject_pattern', 'project/[short-name]');

  // Install schema
  drupal_install_schema('dproject');
}

/**
 * Implementation of hook_install
 **/
function dproject_uninstall() {
  // Uninstall schema
  drupal_uninstall_schema('dproject');
}

/**
 * Implementation of hook_schema
 *
 * @return array
 *  The database schema for dproject
 **/
function dproject_schema() {
  $schema = array();

  $schema['dproject'] = array(
    'description' => t('Project information'),
    'fields' => array(
      'nid' => array(
        'description' => t('The project node id.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'short_name' => array(
        'description' => t('The short project name'),
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
      ),
      'description' => array(
        'description' => t('Project description'),
        'type' => 'text',
        'size' => 'big',
      ),
    ),
    'primary key' => array('nid'),
    'unique keys' => array(
      'short_name' => array('short_name')
    ),
  );

  $schema['dproject_packager'] = array(
    'description' => t('Project packager information'),
    'fields' => array(
      'pid' => array(
        'description' => t('The project packager id.'),
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'nid' => array(
        'description' => t('The project node id.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'packager' => array(
        'description' => t('The packager type'),
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
      ),
      'status' => array(
        'description' => t('Status code for the packager'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 1,
      ),
      'configuration' => array(
        'description' => t('Packager configuration'),
        'type' => 'text',
        'size' => 'big',
      ),
    ),
    'primary key' => array('pid'),
    'indexes' => array(
      'project' => array('nid'),
      'packager' => array('packager'),
    ),
  );

  $schema['dproject_packager_message'] = array(
    'description' => t('Packager messages'),
    'fields' => array(
      'pid' => array(
        'description' => t('The project packager id.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'module' => array(
        'description' => t('The module responsible for the message'),
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
      ),
      'name' => array(
        'description' => t('The name of the message'),
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
      ),
      'message' => array(
        'description' => t('The untranslated message'),
        'type' => 'text',
        'size' => 'big',
      ),
      'message_arguments' => array(
        'description' => t('The arguments for the message'),
        'type' => 'text',
        'size' => 'big',
      ),
      'severity' => array(
        'description' => t('The severity code.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
    ),
    'indexes' => array(
      'severity' => array('severity'),
    ),
    'primary key' => array('pid', 'module', 'name'),
  );

  $schema['dproject_release'] = array(
    'description' => t('Project release information'),
    'fields' => array(
      'rid' => array(
        'description' => t('The project release id.'),
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'project_nid' => array(
        'description' => t('The project node id.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'api_version' => array(
        'description' => t('The supported Drupal version'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 6,
      ),
      'major_version' => array(
        'description' => t('The major release version'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 1,
      ),
      'minor_version' => array(
        'description' => t('The minor release version'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'default' => 0,
      ),
      'version_extra' => array(
        'description' => t('Extra version information'),
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'created' => array(
        'description' => t('The unix timestamp when the release was created'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'default' => 0,
      ),
      'status' => array(
        'description' => t('The status of the release'),
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'file_path' => array(
        'description' => t('The path to the release file'),
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'md5' => array(
        'description' => t('The md5 hash of the release file'),
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'release_metadata' => array(
        'description' => t('Metadata describing the release encoded as json'),
        'type' => 'text',
        'size' => 'big',
      ),
    ),
    'indexes' => array(
      'project' => array('project_nid'),
      'version' => array('api_version', 'major_version', 'minor_version', 'version_extra'),
      'status' => array('status'),
    ),
    'primary key' => array('rid'),
  );

  return $schema;
}