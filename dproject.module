<?php
/**
 * The main file for the dproject module
 *
 * @version $Id$
 **/

require_once('dproject.api.inc');
require_once('dproject.token.inc');

/**
 * Implementation of hook_node_info
 *
 * @return array The node types declared by dproject
 **/
function dproject_node_info() {
  return array(
    'dproject' => array(
      'name' => t('Project'),
      'description' => t('A Drupal project, ordinarily a module or theme'),
      'module' => 'dproject',
      'title_label' => t('Name'),
      'body_label' => t('Extra description'),
    ),
  );
}

function dproject_menu() {
  $items = array();

  $items['dproject/ahah/packager_configuration'] = array(
    'page callback' => '_dproject_ahah_packager_configuration',
    'access arguments' => array('access content'),
    'type' => MENUITEM_CALLBACK,
  );

  $items['dproject/ahah/release_source_configuration/%/%'] = array(
    'page callback' => '_dproject_ahah_release_source_configuration',
    'page arguments' => array(4),
    'access callback' => 'node_access',
    'access arguments' => array('update', 3),
    'type' => MENUITEM_CALLBACK,
  );

  $items['node/%node/packagers'] = array(
    'title' => 'Packagers',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_dproject_project_packagers', 1),
    'access callback' => 'node_access',
    'access arguments' => array(1, 'edit'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
  );

  $items['node/%node/packagers/%/delete'] = array(
    'title' => t('Delete project packager'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_dproject_delete_project_packager', 1, 3),
    'access callback' => 'node_access',
    'access arguments' => array(1, 'edit'),
    'type' => MENUITEM_CALLBACK,
  );

  $items['node/%node/packagers/%/update'] = array(
    'title' => t('Update'),
    'page callback' => '_dproject_update_project_packager',
    'page arguments' => array(1, 3),
    'access callback' => 'node_access',
    'access arguments' => array(1, 'edit'),
    'type' => MENUITEM_CALLBACK,
  );

  $items['node/%node/packagers/%/release'] = array(
    'title' => t('Create a project release'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_dproject_create_project_release', 1, 3),
    'access callback' => 'node_access',
    'access arguments' => array(1, 'edit'),
    'type' => MENUITEM_CALLBACK,
  );

  $items['node/%node/packagers/%/release/confirm/%'] = array(
    'title' => t('Confirm project release'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_dproject_confirm_project_release', 1, 3, 6),
    'access callback' => 'node_access',
    'access arguments' => array(1, 'edit'),
    'type' => MENUITEM_CALLBACK,
  );

  return $items;
}

function _dproject_access($op, $short_name) {
  $node = dproject_get_project_by_name($short_name);
  if ($node) {
    return node_access($op, $node);
  }
  return FALSE;
}

function _dproject_project_packagers($form_state, $node) {
  drupal_set_title(t('Packagers for !name', array(
    '!name' => $node->title,
  )));

  $packagers = dproject_get_packager_types();
  $pack_options = array(
    '' => t('--Select a packager')
  );
  foreach ($packagers as $name => $def) {
    $pack_options[$name] = $def['title'];
  }

  $pp = dproject_get_project_packagers($node->nid);
  $po = '<ul>';
  foreach ($pp as $p) {
    $po .= '<li><label>' . $p->packager . '</label>';
    $po .= '<div class="packager-description">';
    $po .= dproject_packager_description($p);
    $po .= '</div>';

    $packager_links = array(
      l(t('Create a release'), 'node/' . $node->nid . '/packagers/' . $p->pid . '/release', array(
        'attributes' => array(
          'class' => 'package',
        ),
      )),
      l(t('Remove'), 'node/' . $node->nid . '/packagers/' . $p->pid . '/delete', array(
        'attributes' => array(
          'class' => 'delete',
        ),
      )),
    );

    // Add a update link if it's supported by the packager type
    if (isset($packagers[$p->packager]['update'])) {
      $packager_links[] = l(t('Update'), 'node/' . $node->nid . '/packagers/' . $p->pid . '/update', array(
        'attributes' => array(
          'class' => 'update',
        ),
      ));
    }

    $po .= '<ul class="actions">';
    foreach ($packager_links as $link) {
      $po .= '<li>' . $link . '</li>';
    }
    $po .= '</ul>';

    $po .= '</li>';
  }
  $po .= '</ul>';

  $form = array(
    '#submit' => array('_dproject_project_packagers_submit'),
    'packagers' => array(
      '#type' => 'markup',
      '#value' => $po,
    ),
    'project' => array(
      '#type' => 'value',
      '#value' => $node->nid,
    ),
    'packager' => array(
      '#type' => 'select',
      '#title' => t('Add a packager'),
      '#options' => $pack_options,
      '#ahah' => array(
        'path' => 'dproject/ahah/packager_configuration',
        'wrapper' => 'packager-configuration',
      ),
    ),
    'packager_configuration' => array(
      '#type' => 'markup',
      '#value' => '<div id="packager-configuration"></div>',
    ),
  );
  return $form;
}

function _dproject_project_packagers_submit($form, $form_state) {
  $values = $form_state['values'];
  $packager_type = $values['packager'];
  $packagers = dproject_get_packager_types();
  if (isset($packagers[$packager_type]) && isset($packagers[$packager_type]['configuration submit'])) {
    $configuration = call_user_func($packagers[$packager_type]['configuration submit'], $values);
  }
  else {
    $configuration = array();
  }

  $values = array(
    'nid' => $values['project'],
    'packager' => $packager_type,
    'configuration' => json_encode($configuration),
  );
  drupal_write_record('dproject_packager', $values);

  // Call the packager created function for the packager type
  if (isset($packagers[$packager_type]) && isset($packagers[$packager_type]['packager created'])) {
    $pid = db_last_insert_id('dproject_packager', 'pid');
    $packager = dproject_get_project_packager($pid);
    call_user_func($packagers[$packager_type]['packager created'], $packager);
  }
}

function _dproject_create_project_release($form_state, $project, $pid) {
  $packager = dproject_get_project_packager($pid);
  $packager_type = dproject_get_packager_types($packager->packager);
  $last_release = dproject_get_latest_release($pid);

  drupal_set_title(t('Create a release of !name', array('!name' => $project->title)));
  drupal_set_breadcrumb(array(
    l(t('Home'), '<front>'),
    l($project->title, 'node/' . $project->nid),
    l('Packagers', 'node/' . $project->nid . '/packagers'),
  ));

  $form = array();

  $form['pid'] = array(
    '#type' => 'value',
    '#value' => $pid,
  );

  $sources = array(
    '' => t('--Select a source'),
  );
  foreach ($packager_type['sources'] as $name => $def) {
    $sources[$name] = t($def['title']);
  }

  $form['source'] = array(
    '#type' => 'fieldset',
    '#title' => t('Source'),
    'source_name' => array(
      '#type' => 'select',
      '#options' => $sources,
      '#ahah' => array(
        'path' => 'dproject/ahah/release_source_configuration/' . $packager->nid . '/' . $pid,
        'wrapper' => 'source-configuration',
      ),
    ),
    'release_source_configuration' => array(
      '#type' => 'markup',
      '#value' => '<div id="source-configuration"></div>',
    ),
  );

  $form['api_version'] = array(
    '#type' => 'textfield',
    '#title' => t('Api version'),
    '#default_value' => $last_release ? $last_release->api_version : 6,
    '#required' => TRUE,
  );

  $form['major_version'] = array(
    '#type' => 'textfield',
    '#title' => t('Major version'),
    '#default_value' => $last_release ? $last_release->major_version : 1,
    '#required' => TRUE,
  );

  $form['minor_version'] = array(
    '#type' => 'textfield',
    '#title' => t('Minor version'),
    '#default_value' => $last_release ? $last_release->minor_version : 0,
    '#required' => TRUE,
  );

  $form['version_extra'] = array(
    '#type' => 'textfield',
    '#title' => t('Version extra'),
    '#default_value' => $last_release ? $last_release->version_extra : '',
  );

  $form['release_type'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Release type'),
    '#options' => dproject_release_types(TRUE),
    '#required' => TRUE,
  );

  $form['#validate'] = array('_dproject_create_project_release_validate');
  $form['#submit'] = array('_dproject_create_project_release_submit');
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Create'),
  );

  return $form;
}

/**
 * Helper function used to check if
 * a value can be treated as a int
 *
 * @param mixed $v
 *  A value that should be checked
 * @return bool
 *  Returns TRUE if the value can be treated as a int
 */
function _dproject_is_int($v) {
  if (is_numeric($v) && intval($v)==$v) {
    return TRUE;
  }
}

/**
 * Validates the release creation form
 *
 * @param array $form
 *  The form array
 * @param array $form_state
 *  The form state
 * @return void
 */
function _dproject_create_project_release_validate($form, $form_state) {
  $values = $form_state['values'];

  $packager = dproject_get_project_packager($values['pid']);
  $packager_type = dproject_get_packager_types($packager->packager);

  // Validate the versions that always have to be integers
  $nv = array(
    'api_version' => t('Api version'),
    'major_version' => t('Major version'),
  );
  foreach ($nv as $field => $title) {
    if (!is_numeric($values[$field])) {
      form_set_error($field, t('The !title must be a number', array(
        '!title' => $title,
      )));
    }
  }

  // Validate the minor version number
  if (!_dproject_is_int($values['minor_version']) || $values['minor_version']<0) {
    if ($values['version_extra'] != 'dev') {
      form_set_error('version_extra', 'You must create a "dev" release if you don\'t provide a numeric minor version number equal to or greater than zero');
    }
    else if ($values['minor_version']!='x') {
      drupal_set_message('Warning! The non-numeric or negative minor version number for this dev-release is interpreted as unspecified and will be replaced by an x', 'warning');
    }
  }

  // Warn when creating a dev release with a specified minor version
  if ($values['version_extra'] == 'dev' && _dproject_is_int($values['minor_version'])) {
    drupal_set_message('Warning! You are creating a dev release so the minor version number for this release will be set as unspecified and replaced by an x', 'warning');
  }

  // Validate the version extra format
  if (!empty($values['version_extra']) && !preg_match('/^[_a-z0-9]+$/', $values['version_extra'])) {
    form_set_error('version_extra', t('The version extra field can only contain lower-case letters, numbers and underscores'));
  }

  if (empty($values['source_identifier'])) {
    form_set_error('source_name', t('You have to select a valid source for the release'));
  }
  else {
    $source = $packager_type['sources'][$values['source_name']];
    if (isset($source['resolve'])) {
      $res = call_user_func_array($source['resolve'], array($packager, $values['source_identifier']));
      if ($res === FALSE) {
        form_set_error('source_identifier', t('The selected source is not valid'));
      }
    }
  }
}

/**
 * Handles submission of the release creation form
 * and redirects to the confirmation page
 *
 * @param array $form
 *  The form array
 * @param array $form_state
 *  The form state
 * @return void
 */
function _dproject_create_project_release_submit($form, $form_state) {
  $values = $form_state['values'];
  $packager = dproject_get_project_packager($values['pid']);
  $packager_type = dproject_get_packager_types($packager->packager);
  $project = node_load($packager->nid);
  $rel = new DProjectRelease($project);
  $metadata = $rel->get_metadata_object();

  // Make changes in minor version number when necessary
  if ($values['version_extra'] == 'dev' || !_dproject_is_int($values['minor_version']) || $values['minor_version']<0) {
    $values['minor_version'] = NULL;
  }

  // Set version so that we can get the version string
  $rel->set_version($values['api_version'], $values['major_version'], $values['minor_version'], $values['version_extra']);

  // Set the packager for the release and store its configuration
  $rel->set_packager($packager->pid);
  if (isset($packager_type['configure release'])) {
    call_user_func_array($packager_type['configure release'], array(
      &$rel, $packager, $values['source_identifier'],
    ));
  }

  // Set release type information
  $release_type = array();
  foreach ($values['release_type'] as $type) {
    if ($type) {
      $release_type[] = $type;
    }
  }
  $metadata->terms = $release_type;

  $rel->set_status(DPROJECT_RELEASE_STATUS_TEMPORARY);
  $rel->save();

  $rid = $rel->get_id();

  // Send the user to the confirmation page
  drupal_goto("node/{$project->nid}/packagers/{$packager->pid}/release/confirm/{$rid}");
}

/**
 * Displays a release confirmation page
 *
 * @param array $form
 *  The form array
 * @param array $form_state
 *  The form state
 * @param string $pid
 *  The id of the used packager
 * @param string $rid
 *  The if of the release
 * @return void
 */
function _dproject_confirm_project_release($form_state, $project, $pid, $rid) {
  drupal_add_css(drupal_get_path('module','dproject') . '/css/admin.css');

  $rel = DProjectRelease::load($rid);
  $packager = dproject_get_project_packager($rel->get_packager());
  $packager_type = dproject_get_packager_types($packager->packager);
  $source = $packager_type['sources'][$values['source_name']];

  drupal_set_title(t('Confirm release settings for !name', array('!name' => $project->title)));

  $metadata = $rel->get_metadata_object();

  // Fill an array with the human readable names
  // of the selected release types
  $rt = array();
  $release_types = dproject_release_types(TRUE);
  foreach ($metadata->terms as $term) {
    if (isset($release_types[$term])) {
      $rt[] = $release_types[$term];
    }
  }

  return array(
    '#id' => 'dproject-confirm-release-configuration-form',
    'release' => array(
      '#type' => 'value',
      '#value' => $rel->get_id(),
    ),
    'intro_text' => array(
      '#value' => '<p>' . t('Please confirm that the release version is correct and that the source is properly configured before creating the release') . '</p>',
    ),
    'version' => array(
      '#type' => 'item',
      '#title' => t('Version'),
      '#value' => $rel->version_string(),
    ),
    'release_type' => array(
      '#type' => 'item',
      '#title' => t('Release type'),
      '#value' => join($rt, '<br/>'),
    ),
    'packager_description' => array(
      '#type' => 'item',
      '#title' => t('Packager (@name)', array('@name' => $packager->packager)),
      '#value' => dproject_packager_description($packager),
    ),
    'source_description' => array(
      '#type' => 'item',
      '#title' => t('Source description'),
      '#value' => dproject_release_source_description($rel),
    ),
    // TODO: The cancel link should be rewired to a middle step that deletes the
    // temporary release entry, minimizing the cleanup work that cron has to do.
    'cancel_link' => array(
      '#type' => 'markup',
      '#value' => l(t('Cancel'), 'node/' . $project->nid),
    ),
    '#submit' => array('_dproject_project_release_create'),
    'submit' => array(
      '#type' => 'submit',
      '#value' => t('Create release'),
    ),
  );
}

function _dproject_project_release_create($form, $form_state) {
  $release = DProjectRelease::load($form_state['values']['release']);
  
  $release->package();
  $release->set_status(DPROJECT_RELEASE_STATUS_UNPUBLISHED);
  $release->save();
  
  $node = $release->get_project_node();
  drupal_goto('node/' . $node->nid);
}

function _dproject_ahah_release_source_configuration($pid) {
  $source = $_POST['source_name'];
  $packager = dproject_get_project_packager($pid);
  _dproject_ahah_helper('source/release_source_configuration', '_dproject_release_configuration_form', $source, $packager);
}

function _dproject_release_configuration_form($source, $packager, $configuration=array()) {
  $ptype = dproject_get_packager_types($packager->packager);
  $def = $ptype['sources'][$source];

  if (isset($def['options'])) {
    $options = call_user_func($def['options'], $packager);
    return array(
      'source_identifier' => array(
        '#type' => 'select',
        '#options' => $options,
      ),
    );
  }
  return array();
}

function _dproject_update_project_packager($node, $pid) {
  $p = dproject_get_project_packager($pid);
  $ptype = dproject_get_packager_types($p->packager);
  if (isset($ptype['update'])) {
    call_user_func($ptype['update'], $p);
  }
  drupal_goto('node/' . $node->nid . '/packagers');
}

function _dproject_delete_project_packager($form_state, $node, $pid) {
  $p = dproject_get_project_packager($pid);
  if ($p) {
    $out .= '<p>' . t('Do you really want to delete the !type project packager for @project:', array(
      '!type' => $p->packager,
      '@project' => $node->title,
    )) . '</p>';
    $out .= '<div class="packager-description">' . dproject_packager_description($p) . '</div>';

    return array(
      '#submit' => array('_dproject_delete_project_packager_confirmed'),
      'pid' => array(
        '#type' => 'value',
        '#value' => $p->pid,
      ),
      'confirm_text' => array(
        '#type' => 'markup',
        '#value' => $out,
      ),
      'cancel_link' => array(
        '#type' => 'markup',
        '#value' => l(t('No, cancel this action'), 'node/' . $p->nid . '/packagers'),
      ),
      'submit' => array(
        '#type' => 'submit',
        '#value' => t('Yes, go ahead'),
      ),
    );
  }
  else {
    drupal_not_found();
  }
}

function _dproject_delete_project_packager_confirmed($form, $form_state) {
  $pid = $form_state['values']['pid'];
  $p = dproject_get_project_packager($pid);
  if ($p) {
    dproject_delete_project_packager($p);
    drupal_goto('node/' . $p->nid . '/packagers');
  }
  else {
    drupal_not_found();
  }
}

/**
 * Implementation of hook_form
 *
 * @return array The edit or create form for the node
 **/
function dproject_form(&$node, $form_state) {
  $type = node_get_types('type', $node);

  if ($type->has_title) {
    $form['title'] = array(
      '#type' => 'textfield',
      '#title' => check_plain($type->title_label),
      '#required' => TRUE,
      '#default_value' => $node->title,
      '#weight' => -5,
    );
  }

  $form['short_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Short project name'),
    '#required' => TRUE,
    '#weight' => -4,
    '#default_value' => $node->short_name,
  );

  $form['description'] = array(
    '#type' => 'textarea',
    '#title' => t('Project description'),
    '#required' => TRUE,
    '#weight' => -3,
    '#default_value' => $node->description,
  );

  if ($type->has_body) {
    $form['body_field'] = node_body_field($node, $type->body_label, $type->min_word_count);
  }

  if (module_exists('content')) {
    $form['short_name']['#weight'] = content_extra_field_weight('dproject', 'short_name');
    $form['description']['#weight'] = content_extra_field_weight('dproject', 'description');
  }

  return $form;
}

function _dproject_ahah_packager_configuration() {
  $packager = $_POST['packager'];
  _dproject_ahah_helper('packager_configuration', '_dproject_packager_configuration_form', $packager);
}

function _dproject_packager_configuration_form($packager, $configuration=array()) {
  $packagers = dproject_get_packager_types();
  if (isset($packagers[$packager]) && isset($packagers[$packager]['configuration form'])) {
    $form = array();
    $form['_conf'] = call_user_func($packagers[$packager]['configuration form']);
    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Add'),
    );
    return $form;
  }
}

function _dproject_packager_configuration_submit($packager, $configuration=array()) {
  $packagers = dproject_get_packager_types();
  if (isset($packagers[$packager]) && isset($packagers[$packager]['configuration submit'])) {
    return call_user_func($packagers[$packager]['configuration submit']);
  }
}

/**
 * Helper function for implementing ahah page callbacks
 *
 * @param string $element
 *  The name of the form element, can also be a path like "ahah_config/name_field"
 * @param string $form_callback
 *  The function to call to get the form array
 * @return void
 */
function _dproject_ahah_helper($element, $form_callback/*, $arg1, $arg2 ...*/) {
  $cached_form_state = array();
  $cached_form = form_get_cache($_POST['form_build_id'], $cached_form_state);

  // Resolve the parent of the element that is to be set
  $element_path = split('/', $element);
  $element = $element_path[count($element_path)-1];
  $parent = &$cached_form;
  for ($i=0; $i<count($element_path)-1; $i++) {
    if (isset($parent[$element_path[$i]])) {
      $parent = &$parent[$element_path[$i]];
    }
  }

  $args = func_get_args();
  array_shift($args); // Remove element
  array_shift($args); // Remove callback

  // Check if the callback is callable
  if (is_callable($form_callback)) {
    $set = call_user_func_array($form_callback, $args);
  }

  if (empty($set)) {
    $set = array(
      '#value' => '<span></span>',
    );
  }

  $parent[$element] = $set;
  form_set_cache($_POST['form_build_id'], $cached_form, $cached_form_state);
  $form_state = array('submitted' => FALSE);
  $set = form_builder($form_callback, $set, $form_state);
  $output = drupal_render($set);
  print drupal_to_js(array('status' => TRUE, 'data' => $output));
  exit;
}

/**
 * Implementation of hook_nodeapi
 */
function dproject_nodeapi($node, $op, $form) {
  if ($node->type=='dproject') {
    switch($op) {
      case 'load':
        $res = db_query("SELECT short_name, description FROM {dproject} WHERE nid=%d", array(
          ':nid' => $node->nid,
        ));
        if ($a = db_fetch_array($res)) {
          foreach($a as $name => $val) {
            $node->$name = $val;
          }
        }
      case 'validate':
        if (!preg_match('/^[a-z_0..9]+$/', $node->short_name)) {
          form_set_error('short_name', t('The short name can only contain lowercase letters (a-z), underscores and numbers'), 'error');
        }
        // Check for duplicate names
        $eres = db_query("SELECT COUNT(*) AS name_exists FROM {dproject} WHERE short_name='%s'", array(
          ':short_name' => $node->short_name,
        ));
        if ($eo = db_fetch_object($eres) && $eo->name_exists) {
          form_set_error('short_name', t('The short must be unique'), 'error');
        }

        // TODO: Central server check for duplicate names?
      break;
      case 'delete':
        // Delete all the project packagers
        $packagers = dproject_get_project_packagers($node->nid);
        foreach ($packagers as $packager) {
          dproject_delete_project_packager($packager);
        }

        // Delete releases
        db_query('DELETE FROM {dproject_release} WHERE project_nid=%d', array(
          ':nid' => $node->nid,
        ));

        // Delete all project files
        $proj_dir = dproject_project_file_directory($node->nid);
        if ($proj_dir) {
          dproject_delete_directory($proj_dir);
        }

        // Clean up project information
        db_query('DELETE FROM {dproject} WHERE nid=%d', array(
          ':nid' => $node->nid,
        ));
      break;
      case 'update':
      case 'insert':
        $values = array(
          'nid' => $node->nid,
          'short_name' => $node->short_name,
          'description' => $node->description,
        );
        drupal_write_record('dproject', $values, $op=='update'?'nid':NULL);
        if (module_exists('path') && !module_exists('pathauto')) {
          path_set_alias('node/' . $node->nid, 'project/' . $node->short_name);
        }
      break;
      case 'prepare':

      break;
    }
  }
}
