<?php
/**
 * The main file for the dproject module
 *
 * @version $Id$
 **/

require_once('includes/dproject.token.inc');

/**
 * Implementation of hook_autoload_info().
 */
function dproject_autoload_info() {
  return array(
    'DProjectException' => array('file' => 'includes/DProjectException.class.inc'),
    'DProject'          => array('file' => 'includes/DProject.class.inc'),
    'DProjectPackager'  => array('file' => 'includes/DProjectPackager.class.inc'),
    'DProjectRelease'   => array('file' => 'includes/DProjectRelease.class.inc'),
  );
}

/**
 * Implementation of hook_node_info
 *
 * @return array The node types declared by dproject
 **/
function dproject_node_info() {
  return array(
    'dproject' => array(
      'name' => t('Project'),
      'description' => t('A Drupal project, ordinarily a module or theme'),
      'module' => 'dproject',
      'title_label' => t('Name'),
      'body_label' => t('Extra description'),
    ),
  );
}

/**
 * Implementation of hook_cron().
 */
function dproject_cron() {
  module_load_include('inc', 'dproject', 'includes/dproject.cron');
  _dproject_cron();
}

/**
 * Implementation of hook_menu
 **/
function dproject_menu() {
  $items = array();

  $items['dproject/ahah/packager_configuration'] = array(
    'page callback' => '_dproject_ahah_packager_configuration',
    'access arguments' => array('access content'),
    'file' => 'includes/dproject.project-admin.inc',
    'type' => MENUITEM_CALLBACK,
  );

  $items['dproject/ahah/release_source_configuration/%node/%dprojectpackager'] = array(
    'page callback' => '_dproject_ahah_release_source_configuration',
    'page arguments' => array(4),
    'access callback' => '_dproject_node_access',
    'access arguments' => array(3, 'update'),
    'file' => 'includes/dproject.project-admin.inc',
    'type' => MENUITEM_CALLBACK,
  );

  $items['node/%node/packagers'] = array(
    'title' => 'Packagers',
    'page callback' => '_dproject_packagers_redirect',
    'page arguments' => array(1),
    'access callback' => '_dproject_node_access',
    'access arguments' => array(1, 'update'),
    'file' => 'includes/dproject.project-admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
  );

  $items['project/%dprojectnode/packagers'] = array(
    'title' => 'Packagers',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_dproject_project_packagers', 1),
    'access callback' => '_dproject_node_access',
    'access arguments' => array(1, 'update'),
    'file' => 'includes/dproject.project-admin.inc',
    'type' => MENU_NORMAL_ITEM,
    'weight' => 2,
  );

  $items['project/%dprojectnode/packagers/%dprojectpackager/delete'] = array(
    'title' => t('Delete project packager'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_dproject_delete_project_packager', 1, 3),
    'access callback' => '_dproject_node_access',
    'access arguments' => array(1, 'update'),
    'file' => 'includes/dproject.project-admin.inc',
    'type' => MENUITEM_CALLBACK,
  );

  $items['project/%dprojectnode/packagers/%dprojectpackager/update'] = array(
    'title' => t('Update'),
    'page callback' => '_dproject_update_project_packager',
    'page arguments' => array(1, 3),
    'access callback' => '_dproject_node_access',
    'access arguments' => array(1, 'update'),
    'file' => 'includes/dproject.project-admin.inc',
    'type' => MENUITEM_CALLBACK,
  );

  $items['project/%dprojectnode/packagers/%dprojectpackager/release'] = array(
    'title' => t('Create a project release'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_dproject_create_project_release', 1, 3),
    'access callback' => '_dproject_node_access',
    'access arguments' => array(1, 'update'),
    'file' => 'includes/dproject.project-admin.inc',
    'type' => MENUITEM_CALLBACK,
  );

  $items['project/%dprojectnode/releases/%'] = array(
    'title' => t('Release information'),
    'page callback' => '_dproject_release_information',
    'page arguments' => array(1, 3),
    'access callback' => '_dproject_node_access',
    'access arguments' => array(1, 'view'),
    'type' => MENUITEM_CALLBACK,
  );

  $items['project/%dprojectnode/packagers/%dprojectpackager/release/confirm/%'] = array(
    'title' => t('Confirm project release'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_dproject_confirm_project_release', 1, 3, 6),
    'access callback' => '_dproject_node_access',
    'access arguments' => array(1, 'update'),
    'file' => 'includes/dproject.project-admin.inc',
    'type' => MENUITEM_CALLBACK,
  );

  $items['project/%dprojectnode/release-history/%'] = array(
    'page callback' => '_dproject_feed_generate',
    'page arguments' => array(1, 3),
    'file' => 'includes/dproject.feed.inc',
    'access callback' => '_dproject_node_access',
    'access arguments' => array(1, 'view'),
    'type' => MENUITEM_CALLBACK,
  );

  $items['release-history/%dprojectnode/%'] = array(
    'page callback' => '_dproject_feed_generate',
    'page arguments' => array(1, 2),
    'file' => 'includes/dproject.feed.inc',
    'access callback' => '_dproject_node_access',
    'access arguments' => array(1, 'view'),
    'type' => MENUITEM_CALLBACK,
  );

  return $items;
}

/**
 * Menu system wildcard loader for %dprojectnode
 * allowing projects to be referenced by name
 *
 * @param string $short_name
 * @return stdClass
 */
function dprojectnode_load($short_name) {
  return DProject::singleton()->getProjectByName($short_name);
}

/**
 * Menu system wildcard loader for %dprojectpackager
 * allowing projects to be referenced by name
 *
 * @param string $short_name
 * @return stdClass
 */
function dprojectpackager_load($pid) {
  return DProjectPackager::load($pid);
}

/**
 * Helper function used for access callbacks.
 * This function calls and returns the result of
 * the node_access function if the node is of the
 * type dproject. Otherwise FALSE is returned.
 *
 * @param object $node
 *  The node to check for access to
 * @param string $op
 *  The operation that access should be checked for
 * @return bool
 *  TRUE if access is granted, FALSE if not
 */
function _dproject_node_access($node, $op) {
  if (is_object($node) && $node->type=='dproject') {
    return node_access($op, $node);
  }
  return FALSE;
}

/**
 * Implementation of hook_form
 *
 * @return array The edit or create form for the node
 **/
function dproject_form(&$node, $form_state) {
  drupal_module_include('inc', 'dproject', 'includes/dproject.project-node');
  _dproject_form($node, $form_state);
}

/**
 * Helper function for implementing ahah page callbacks
 *
 * @param string $element
 *  The name of the form element, can also be a path like "ahah_config/name_field"
 * @param string $form_callback
 *  The function to call to get the form array
 * @return void
 */
function _dproject_ahah_helper($element, $form_callback/*, $arg1, $arg2 ...*/) {
  $cached_form_state = array();
  $cached_form = form_get_cache($_POST['form_build_id'], $cached_form_state);

  // Resolve the parent of the element that is to be set
  $element_path = split('/', $element);
  $element = $element_path[count($element_path)-1];
  $parent = &$cached_form;
  for ($i=0; $i<count($element_path)-1; $i++) {
    if (isset($parent[$element_path[$i]])) {
      $parent = &$parent[$element_path[$i]];
    }
  }

  $args = func_get_args();
  array_shift($args); // Remove element
  array_shift($args); // Remove callback

  // Check if the callback is callable
  if (is_callable($form_callback)) {
    $set = call_user_func_array($form_callback, $args);
  }

  if (empty($set)) {
    $set = array(
      '#value' => '<span></span>',
    );
  }

  $parent[$element] = $set;
  form_set_cache($_POST['form_build_id'], $cached_form, $cached_form_state);
  $form_state = array('submitted' => FALSE);
  $set = form_builder($form_callback, $set, $form_state);
  $output = drupal_render($set);
  print drupal_to_js(array('status' => TRUE, 'data' => $output));
  exit;
}

/**
 * Implementation of hook_nodeapi
 */
function dproject_nodeapi($node, $op, $form) {
  if ($node->type=='dproject') {
    switch($op) {
      case 'load':
        $res = db_query("SELECT short_name, description FROM {dproject} WHERE nid=%d", array(
          ':nid' => $node->nid,
        ));
        if ($a = db_fetch_array($res)) {
          foreach($a as $name => $val) {
            $node->$name = $val;
          }
        }
      case 'validate':
        if (!preg_match('/^[a-z_0..9]+$/', $node->short_name)) {
          form_set_error('short_name', t('The short name can only contain lowercase letters (a-z), underscores and numbers'), 'error');
        }
        // Check for duplicate names
        $eres = db_query("SELECT COUNT(*) AS name_exists FROM {dproject} WHERE short_name='%s'", array(
          ':short_name' => $node->short_name,
        ));
        if ($eo = db_fetch_object($eres) && $eo->name_exists) {
          form_set_error('short_name', t('The short must be unique'), 'error');
        }

        // TODO: Central server check for duplicate names?
      break;
      case 'delete':
        $dp = DProject::singleton();
        // Delete all the project packagers
        $packagers = DProjectPackager::getProjectPackagers($node->nid);
        foreach ($packagers as $packager) {
          $packager->delete();
        }

        // Delete releases
        db_query('DELETE FROM {dproject_release} WHERE project_nid=%d', array(
          ':nid' => $node->nid,
        ));

        // Delete all project files
        $proj_dir = $dp->projectFileDirectory($node);
        if ($proj_dir) {
          $dp->deleteDirectory($proj_dir);
        }

        // Clean up project information
        db_query('DELETE FROM {dproject} WHERE nid=%d', array(
          ':nid' => $node->nid,
        ));

        // Clean up alias
        if (module_exists('path') && !module_exists('pathauto')) {
          path_set_alias('node/' . $node->nid);
        }
      break;
      case 'update':
      case 'insert':
        $values = array(
          'nid' => $node->nid,
          'short_name' => $node->short_name,
          'description' => $node->description,
        );
        drupal_write_record('dproject', $values, $op=='update'?'nid':NULL);
        if (module_exists('path') && !module_exists('pathauto')) {
          path_set_alias('node/' . $node->nid, 'project/' . $node->short_name);
        }
      break;
      case 'prepare':

      break;
    }
  }
}

/**
 * Implementation of hook_views_api().
 */
function dproject_views_api() {
  return array(
    'api' => 2.0,
    'path' => drupal_get_path('module', 'dproject') . '/views',
  );
}